name: Build All Targets

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      push:
        type: choice
        description: Whether to push the image to Docker Hub or not
        required: true
        options:
        - "true"
        - "false"
jobs:
  matrices:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.generate-python-versions-matrix.outputs.python-versions }}
      debian-versions: ${{ steps.generate-debian-versions-matrix.outputs.debian-versions }}
      alpine-versions: ${{ steps.generate-alpine-versions-matrix.outputs.alpine-versions }}
      ubuntu-versions: ${{ steps.generate-ubuntu-versions-matrix.outputs.ubuntu-versions }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install jq
      run: |
        sudo apt-get update && sudo apt-get -y install jq

    - name: Generate Python versions matrix
      id: generate-python-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions python | jq -R .)

        # Echo to output
        echo "Python versions: '${VERSIONS}'"
        echo "::set-output name=python-versions::${VERSIONS}"

    - name: Generate Debian versions matrix
      id: generate-debian-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions debian | jq -R .)

        # Echo to output
        echo "Debian versions: '${VERSIONS}'"
        echo "::set-output name=debian-versions::${VERSIONS}"

    - name: Generate Alpine versions matrix
      id: generate-alpine-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions alpine | jq -R .)

        # Echo to output
        echo "Alpine versions: '${VERSIONS}'"
        echo "::set-output name=alpine-versions::${VERSIONS}"

    - name: Generate Ubuntu versions matrix
      id: generate-ubuntu-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions ubuntu | jq -R .)

        # Echo to output
        echo "Ubuntu versions: '${VERSIONS}'"
        echo "::set-output name=ubuntu-versions::${VERSIONS}"

    - uses: hmarr/debug-action@v2

  version:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Perform versioning if necessary
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: Bryan Larson
        GIT_AUTHOR_EMAIL: bryan_larson@hms.harvard.edu
      with:
        extra_plugins: |
          @semantic-release/exec
          @semantic-release/changelog
          @semantic-release/git

    - name: Echo versioning
      run: |
        # Generate versions
        echo "New version released: '${{ steps.semantic.outputs.new_release_published }}'"
        echo "New version: '${{ steps.semantic.outputs.new_release_version }}'"

  build-debian:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - id: build-debian-targets
      name: Build Debian targets
      uses: ./.github/actions/build-target
      with:
        target: "debian"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-debian-slim:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - id: build-debian-slim-targets
      name: Build Debian Slim targets
      uses: ./.github/actions/build-target
      with:
        target: "debian-slim"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-alpine:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.alpine-versions) }}
    steps:

    - id: build-alpine-targets
      name: Build Alpine targets
      uses: ./.github/actions/build-target
      with:
        target: "alpine"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-ubuntu:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.ubuntu-versions) }}
    steps:

    - id: build-ubuntu-targets
      name: Build Ubuntu targets
      uses: ./.github/actions/build-target
      with:
        target: "ubuntu"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"
