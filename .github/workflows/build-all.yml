name: Build All Targets

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:
    inputs:
      push:
        type: choice
        description: Whether to push the image to Docker Hub or not
        required: true
        options:
        - "true"
        - "false"
  schedule:
    - cron:  '0 8 * * 1'

jobs:
  matrices:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.generate-versions-matrices.outputs.python-versions }}
      debian-versions: ${{ steps.generate-versions-matrices.outputs.debian-versions }}
      alpine-versions: ${{ steps.generate-versions-matrices.outputs.alpine-versions }}
      ubuntu-versions: ${{ steps.generate-versions-matrices.outputs.ubuntu-versions }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate versions matrices
      id: generate-versions-matrices
      run: |
        # Generate versions
        echo "Python versions: $(python build.py versions python)"
        echo "::set-output name=python-versions::$(python build.py versions python)"
        echo "Debian versions: $(python build.py versions debian)"
        echo "::set-output name=debian-versions::$(python build.py versions debian)"
        echo "Alpine versions: $(python build.py versions alpine)"
        echo "::set-output name=alpine-versions::$(python build.py versions alpine)"
        echo "Ubuntu versions: $(python build.py versions ubuntu)"
        echo "::set-output name=ubuntu-versions::$(python build.py versions ubuntu)"

  build-debian:
    needs:
      - matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - id: build-debian-targets
      name: Build Debian targets
      uses: ./.github/actions/build-target
      with:
        target: "debian"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        push: "${{ github.event.inputs.push }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-debian-slim:
    needs:
      - matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - id: build-debian-slim-targets
      name: Build Debian Slim targets
      uses: ./.github/actions/build-target
      with:
        target: "debian-slim"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        push: "${{ github.event.inputs.push }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-alpine:
    needs:
      - matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.alpine-versions) }}
        exclude:
          - os-version: "3.12"
            python-version: "3.10"
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - id: build-alpine-targets
      name: Build Alpine targets
      uses: ./.github/actions/build-target
      with:
        target: "alpine"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        push: "${{ github.event.inputs.push }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-ubuntu:
    needs:
      - matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.ubuntu-versions) }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - id: build-ubuntu-targets
      name: Build Ubuntu targets
      uses: ./.github/actions/build-target
      with:
        target: "ubuntu"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        push: "${{ github.event.inputs.push }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"
