name: Build All Targets

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  matrices:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.python-versions.outputs.python-versions }}
      debian-versions: ${{ steps.debian-versions.outputs.debian-versions }}
      alpine-versions: ${{ steps.alpine-versions.outputs.alpine-versions }}
      ubuntu-versions: ${{ steps.ubuntu-versions.outputs.ubuntu-versions }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: 3.10

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate Python versions matrix
      id: generate-python-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions python)

        # Echo to output
        echo "::set-output name=python-versions::${VERSIONS}"

    - name: Generate Debian versions matrix
      id: generate-debian-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions debian)

        # Echo to output
        echo "::set-output name=debian-versions::${VERSIONS}"

    - name: Generate Alpine versions matrix
      id: generate-alpine-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions alpine)

        # Echo to output
        echo "::set-output name=alpine-versions::${VERSIONS}"

    - name: Generate Ubuntu versions matrix
      id: generate-ubuntu-versions-matrix
      run: |
        # Generate versions
        VERSIONS=$(python build.py versions ubuntu)

        # Echo to output
        echo "::set-output name=ubuntu-versions::${VERSIONS}"

  version:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Perform versioning if necessary
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: Bryan Larson
        GIT_AUTHOR_EMAIL: bryan_larson@hms.harvard.edu
      with:
        extra_plugins: |
          @semantic-release/exec
          @semantic-release/changelog
          @semantic-release/git

  build-debian:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - id: build-debian-targets
      name: Build Debian targets
      uses: ./.github/actions/build-target
      with:
        target: "debian"
        os-version-flag: "-d"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-debian-slim:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
    steps:

    - id: build-debian-slim-targets
      name: Build Debian Slim targets
      uses: ./.github/actions/build-target
      with:
        target: "debian-slim"
        os-version-flag: "-d"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-alpine:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.alpine-versions) }}
    steps:

    - id: build-alpine-targets
      name: Build Alpine targets
      uses: ./.github/actions/build-target
      with:
        target: "alpine"
        os-version-flag: "-a"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

  build-ubuntu:
    needs:
      - matrices
      - version
    if: needs.version.new_release_published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.ubuntu-versions) }}
    steps:

    - id: build-ubuntu-targets
      name: Build Ubuntu targets
      uses: ./.github/actions/build-target
      with:
        target: "ubuntu"
        os-version-flag: "-u"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        version: "${{ needs.version.release_version }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"
