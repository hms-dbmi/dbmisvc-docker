name: Build Debian Slim Targets

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:
    inputs:
      push:
        type: choice
        description: Whether to push the image to Docker Hub or not
        required: true
        options:
        - "true"
        - "false"
  schedule:
    - cron:  '0 8 * * 1'

jobs:
  matrices:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.generate-versions-matrices.outputs.python-versions }}
      debian-versions: ${{ steps.generate-versions-matrices.outputs.debian-versions }}
    steps:

    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate versions matrices
      id: generate-versions-matrices
      run: |
        # Generate versions
        echo "Python versions: $(python build.py versions python)"
        echo "python-versions=$(python build.py versions python)" >> $GITHUB_OUTPUT
        echo "Debian versions: $(python build.py versions debian)"
        echo "debian-versions=$(python build.py versions debian)" >> $GITHUB_OUTPUT

  build-debian-slim:
    needs:
      - matrices
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.matrices.outputs.python-versions) }}
        os-version: ${{ fromJson(needs.matrices.outputs.debian-versions) }}
        release-ref: ["master", "v0.7.1"]
    steps:

    - name: Checkout source
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.release-ref }}

    - id: build-debian-slim-targets
      name: Build Debian Slim targets
      uses: ./.github/actions/build-target
      with:
        target: "debian-slim"
        os-version: "${{ matrix.os-version }}"
        python-version: "${{ matrix.python-version }}"
        repo: "${{ secrets.DBMISVC_REPO }}"
        push: "${{ github.event.inputs.push }}"
        docker-username: "${{ secrets.DOCKER_HUB_USERNAME }}"
        docker-password: "${{ secrets.DOCKER_HUB_PASSWORD }}"
