base_meta:
  build: |
    LABEL org.label-schema.schema-version=1.0 \
      org.label-schema.vendor="HMS-DBMI" \
      org.label-schema.version="{{ VERSION }}" \
      org.label-schema.name="dbmisvc" \
      org.label-schema.build-date="{{ DATE }}" \
      org.label-schema.description="DBMISVC base image" \
      org.label-schema.url="https://github.com/hms-dbmi/dbmisvc-docker" \
      org.label-schema.vcs-url="https://github.com/hms-dbmi/dbmisvc-docker" \
      org.label-schema.vcf-ref="{{ COMMIT }}"

    # Add requirements
    ARG BUILD_ENV=prod
    ARG APP_ROOT=/app

    # Set package versions
    ENV PIP_AWS_CLI_VERSION=1.18.112
    ENV PIP_SHINTO_CLI_VERSION=0.5.0
    ENV PIP_DUMB_INIT_VERSION=1.2.2
    ENV PIP_GUNICORN_VERSION=20.0.4

base_debian_nginx_build:
  FROM: python:{{ PYTHON_VERSION|default('3.7') }}-slim-{{ DEBIAN_VERSION|default('stretch') }}
  build: |

    ARG NGINX_VERSION=1.14.2-1~stretch
    ARG NJS_VERSION=1.14.2.0.2.6-1~stretch
    ARG BUILD_DIR=/tmp/dbmisvc_nginx_build

    # Run the build
    RUN set -x \
    	&& apt-get update \
    	&& apt-get install --no-install-recommends --no-install-suggests -y curl gnupg1 apt-transport-https ca-certificates \
    	&& \
    	NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
    	found=''; \
    	for server in \
    		ha.pool.sks-keyservers.net \
    		hkp://keyserver.ubuntu.com:80 \
    		hkp://p80.pool.sks-keyservers.net:80 \
    		pgp.mit.edu \
    	; do \
    		echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
    		apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
    	done; \
    	test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
    	apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \
    # Prepare additional modules
        && curl -fSL https://github.com/evanmiller/mod_zip/archive/master.tar.gz -o mod_zip-master.tar.gz \
        && tar -zxC /usr/src -f mod_zip-master.tar.gz \
        && rm mod_zip-master.tar.gz \
    # Add nginx sources
    	&& echo "deb https://nginx.org/packages/debian/ stretch nginx" >> /etc/apt/sources.list.d/nginx.list \
        && echo "deb-src https://nginx.org/packages/debian/ stretch nginx" >> /etc/apt/sources.list.d/nginx.list \
        \
    # new directory for storing sources and .deb files
        && mkdir -p "${BUILD_DIR}" \
        && chmod 777 "${BUILD_DIR}" \
    # (777 to ensure APT's "_apt" user can access it too)
        \
    # build .deb files from upstream's source packages (which are verified by apt-get)
        && apt-get update \
        && apt-get build-dep -y nginx=${NGINX_VERSION} \
    						 nginx-module-xslt=${NGINX_VERSION} \
                             nginx-module-geoip=${NGINX_VERSION} \
                             nginx-module-image-filter=${NGINX_VERSION} \
                             nginx-module-njs=${NJS_VERSION} \
        && ( \
            cd "${BUILD_DIR}" \
            && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" \
              apt-get source nginx=${NGINX_VERSION} \
    # Include any additional modules into nginx rules
            && nginxBuildDir=$(find . -maxdepth 1 -type d -regextype sed -regex "\./nginx\-[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}" | head -n 1) \
            && sed -iE 's/\.\/configure/.\/configure --add-module=\/usr\/src\/mod_zip-master/g' $nginxBuildDir/debian/rules \
    # Build nginx
            && cd $nginxBuildDir && dpkg-buildpackage -b \
    # Build other modules
            && cd "${BUILD_DIR}" \
            && DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" \
                apt-get source --compile nginx-module-xslt=${NGINX_VERSION} \
                                         nginx-module-geoip=${NGINX_VERSION} \
                                         nginx-module-image-filter=${NGINX_VERSION} \
                                         nginx-module-njs=${NJS_VERSION} \
            ) \
        && ls -lAFh "${BUILD_DIR}" \
        && ( cd "${BUILD_DIR}" && dpkg-scanpackages . > Packages ) \
        && grep '^Package: ' "${BUILD_DIR}/Packages" \
        && echo "deb [ trusted=yes ] file://${BUILD_DIR} ./" > /etc/apt/sources.list.d/temp.list

base_debian_nginx_modules_copy:
  copy_from:
    base_debian_nginx_build:
      /tmp/dbmisvc_nginx_build: /tmp/
      /etc/apt/sources.list.d/temp.list: /etc/apt/sources.list.d/

base_debian_nginx_modules_install:
  requires:
    - base_debian_nginx_modules_copy
  build: |

    RUN echo $(ls -la /etc/apt/sources.list.d/temp.list)
    RUN echo $(ls -la /tmp/dbmisvc_nginx_build)

    ARG NGINX_VERSION=1.14.2-1~stretch
    ARG NJS_VERSION=1.14.2.0.2.6-1~stretch
    ARG BUILD_DIR=/tmp/dbmisvc_nginx_build

    # Install built debs and other packages
    RUN apt-get -o Acquire::GzipIndexes=false update \
        && apt-get install --no-install-recommends --no-install-suggests -y \
                            nginx=${NGINX_VERSION} \
    						nginx-module-xslt=${NGINX_VERSION} \
                            nginx-module-geoip=${NGINX_VERSION} \
                            nginx-module-image-filter=${NGINX_VERSION} \
                            nginx-module-njs=${NJS_VERSION} \
    						gettext-base \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/* \
    	&& rm -rf ${BUILD_DIR} \
    	&& rm /etc/apt/sources.list.d/temp.list

base_debian_nginx_install:
  build: |
    RUN apt-get update \
      && apt-get install -y --no-install-recommends \
        nginx \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*

base_alpine_nginx_modules_install:
  build: |
    # Install nginx with mod_zip
    ENV NGINX_VERSION 1.14.2
    RUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \
    	&& CONFIG="\
    		--prefix=/etc/nginx \
    		--sbin-path=/usr/sbin/nginx \
    		--modules-path=/usr/lib/nginx/modules \
    		--conf-path=/etc/nginx/nginx.conf \
    		--error-log-path=/var/log/nginx/error.log \
    		--http-log-path=/var/log/nginx/access.log \
    		--pid-path=/var/run/nginx.pid \
    		--lock-path=/var/run/nginx.lock \
    		--http-client-body-temp-path=/var/cache/nginx/client_temp \
    		--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    		--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    		--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    		--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    		--user=nginx \
    		--group=nginx \
    		--with-http_ssl_module \
    		--with-http_realip_module \
    		--with-http_addition_module \
    		--with-http_sub_module \
    		--with-http_dav_module \
    		--with-http_flv_module \
    		--with-http_mp4_module \
    		--with-http_gunzip_module \
    		--with-http_gzip_static_module \
    		--with-http_random_index_module \
    		--with-http_secure_link_module \
    		--with-http_stub_status_module \
    		--with-http_auth_request_module \
    		--with-http_xslt_module=dynamic \
    		--with-http_image_filter_module=dynamic \
    		--with-http_geoip_module=dynamic \
    		--with-threads \
    		--with-stream \
    		--with-stream_ssl_module \
    		--with-stream_ssl_preread_module \
    		--with-stream_realip_module \
    		--with-stream_geoip_module=dynamic \
    		--with-http_slice_module \
    		--with-mail \
    		--with-mail_ssl_module \
    		--with-compat \
    		--with-file-aio \
    		--with-http_v2_module \
            --add-module=../mod_zip-master \
    	" \
    	&& addgroup -S nginx \
    	&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \
    	&& apk add --no-cache --virtual .build-deps \
    		gcc \
    		libc-dev \
    		make \
    		openssl-dev \
    		pcre-dev \
    		zlib-dev \
    		linux-headers \
    		curl \
    		gnupg1 \
    		libxslt-dev \
    		gd-dev \
    		geoip-dev \
    	&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \
    	&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \
        && curl -fSL https://github.com/evanmiller/mod_zip/archive/master.tar.gz -o mod_zip-master.tar.gz \
    	&& export GNUPGHOME="$(mktemp -d)" \
    	&& found=''; \
    	for server in \
    		ha.pool.sks-keyservers.net \
    		hkp://keyserver.ubuntu.com:80 \
    		hkp://p80.pool.sks-keyservers.net:80 \
    		pgp.mit.edu \
    	; do \
    		echo "Fetching GPG key $GPG_KEYS from $server"; \
    		gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" && found=yes && break; \
    	done; \
    	test -z "$found" && echo >&2 "error: failed to fetch GPG key $GPG_KEYS" && exit 1; \
    	gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \
    	&& rm -rf "$GNUPGHOME" nginx.tar.gz.asc \
    	&& mkdir -p /usr/src \
    	&& tar -zxC /usr/src -f nginx.tar.gz \
        && tar -zxC /usr/src -f mod_zip-master.tar.gz \
        && rm nginx.tar.gz mod_zip-master.tar.gz \
    	&& cd /usr/src/nginx-$NGINX_VERSION \
    	&& ./configure $CONFIG --with-debug \
    	&& make -j$(getconf _NPROCESSORS_ONLN) \
    	&& mv objs/nginx objs/nginx-debug \
    	&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \
    	&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \
    	&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \
    	&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \
    	&& ./configure $CONFIG \
    	&& make -j$(getconf _NPROCESSORS_ONLN) \
    	&& make install \
    	&& rm -rf /etc/nginx/html/ \
    	&& mkdir /etc/nginx/conf.d/ \
    	&& mkdir -p /usr/share/nginx/html/ \
    	&& install -m644 html/index.html /usr/share/nginx/html/ \
    	&& install -m644 html/50x.html /usr/share/nginx/html/ \
    	&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \
    	&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \
    	&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \
    	&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \
    	&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \
    	&& ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \
    	&& strip /usr/sbin/nginx* \
    	&& strip /usr/lib/nginx/modules/*.so \
    	&& rm -rf /usr/src/nginx-$NGINX_VERSION \
    	\
    	# Bring in gettext so we can get `envsubst`, then throw
    	# the rest away. To do this, we need to install `gettext`
    	# then move `envsubst` out of the way so `gettext` can
    	# be deleted completely, then move `envsubst` back.
    	&& apk add --no-cache --virtual .gettext gettext \
    	&& mv /usr/bin/envsubst /tmp/ \
    	\
    	&& runDeps="$( \
    		scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \
    			| tr ',' '\n' \
    			| sort -u \
    			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    	)" \
    	&& apk add --no-cache --virtual .nginx-rundeps $runDeps \
    	&& apk del .build-deps \
    	&& apk del .gettext \
    	&& mv /tmp/envsubst /usr/local/bin/ \
    	\
    	# Bring in tzdata so users could set the timezones through the environment
    	# variables
    	&& apk add --no-cache tzdata \
    	# Create dir for cache
    	&& mkdir -p /var/cache/nginx/client_temp

base_alpine_nginx_install:
  build: |
    RUN apk add --no-cache -U nginx \
      && rm -rf /var/cache/apk/*

base_alpine_pip_build:
  requires:
  - base_meta
  FROM: python:{{ PYTHON_VERSION|default('3.7') }}-alpine{{ ALPINE_VERSION|default('3.8') }}
  build: |

    # Install dependencies
    RUN apk add --update \
        build-base \
        g++

    # Install some pip packages
    RUN pip install \
      awscli==${PIP_AWS_CLI_VERSION} \
      shinto-cli==${PIP_SHINTO_CLI_VERSION} \
      dumb-init==${PIP_DUMB_INIT_VERSION} \
      gunicorn==${PIP_GUNICORN_VERSION}

base_debian_pip_build:
  requires:
  - base_meta
  FROM: python:{{ PYTHON_VERSION|default('3.7') }}-slim-{{ DEBIAN_VERSION|default('stretch') }}
  build: |

    # Install dependencies
    RUN apt-get update \
      && apt-get install -y --no-install-recommends \
        g++ \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/*

    # Install some pip packages
    RUN pip install \
      awscli==${PIP_AWS_CLI_VERSION} \
      shinto-cli==${PIP_SHINTO_CLI_VERSION} \
      dumb-init==${PIP_DUMB_INIT_VERSION} \
      gunicorn==${PIP_GUNICORN_VERSION}

base_alpine_build:
  copy_from:
    base_alpine_pip_build:
       /root/.cache: /root/
  build: |
    RUN apk add -U --no-cache unzip curl bash jq openssl \
        && rm -rf /var/cache/apk/*

    # Set nginx user
    ENV DBMI_NGINX_USER nginx

base_debian_build:
  copy_from:
    base_debian_pip_build:
      /root/.cache: /root/
  build: |
    RUN apt-get update \
        && apt-get install -y --no-install-recommends \
            jq \
            curl \
            openssl \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*

    # Set nginx user
    ENV DBMI_NGINX_USER www-data

base_base_build:
  build_directory: ./
  build: |

    # Install some pip packages
    RUN pip install \
      awscli==${PIP_AWS_CLI_VERSION} \
      shinto-cli==${PIP_SHINTO_CLI_VERSION} \
      dumb-init==${PIP_DUMB_INIT_VERSION} \
      gunicorn==${PIP_GUNICORN_VERSION}

    # Copy scripts, templates and resources
    ADD docker-entrypoint-templates.d/ /docker-entrypoint-templates.d/
    ADD docker-entrypoint-resources.d/ /docker-entrypoint-resources.d/
    ADD docker-entrypoint-init.d/ /docker-entrypoint-init.d/
    ADD docker-entrypoint.d/ /docker-entrypoint.d/

    # Add the init script and make it executable
    ADD docker-entrypoint.sh /docker-entrypoint.sh
    RUN chmod a+x docker-entrypoint.sh

    ENTRYPOINT ["dumb-init", "/docker-entrypoint.sh"]

    CMD gunicorn ${DBMI_APP_WSGI}.wsgi:application -b unix:/tmp/gunicorn.sock \
        --user ${DBMI_NGINX_USER} --group ${DBMI_NGINX_USER} --chdir=${DBMI_APP_ROOT}
