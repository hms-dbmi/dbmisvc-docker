user {{ DBMI_NGINX_USER }};

worker_processes auto;

pid {{ DBMI_NGINX_PID_PATH }};

include /etc/nginx/modules-enabled/*.conf;

{% if DBMI_FILE_PROXY is defined and DBMI_FILE_PROXY %}
# Load zip module
load_module /usr/lib/nginx/modules/ngx_http_zip_module.so;
{% endif %}

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	server_names_hash_bucket_size 128;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /dev/stdout;
	error_log /dev/stderr;

	##
	# Forwarded Header Settings
	##

	# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
      default $http_x_forwarded_proto;
      ''      $scheme;
    }

    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
    # server port the client connected to
    map $http_x_forwarded_port $proxy_x_forwarded_port {
      default $http_x_forwarded_port;
      ''      $server_port;
    }

    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
    # Connection header that may have been passed to this server
    map $http_upgrade $proxy_connection {
      default upgrade;
      '' close;
    }

    # Set appropriate X-Forwarded-Ssl header
    map $scheme $proxy_x_forwarded_ssl {
      default $http_x_forwarded_ssl;
      https on;
      '' off;
    }

	upstream gunicorn {

        # for UNIX domain socket setups
        server unix:/tmp/gunicorn.sock fail_timeout=0;
    }

    server {
    {% if DBMI_SSL is defined and DBMI_SSL %}

        listen {{ DBMI_PORT }} ssl default_server;
        ssl_certificate "{{ DBMI_SSL_PATH }}/default.crt";
        ssl_certificate_key "{{ DBMI_SSL_PATH }}/default.key";

    {% else %}

        listen {{ DBMI_PORT }} default_server;

    {% endif %}

    {% if DBMI_HEALTHCHECK is defined and DBMI_HEALTHCHECK %}
        include /etc/nginx/conf.d/nginx.healthcheck.conf;
    {% endif %}

        location / {

            access_log /var/log/nginx/default.access.log;
            error_log /var/log/nginx/default.error.log error;

            return 444;
        }
    }

    server {
    {% if DBMI_SSL is defined and DBMI_SSL %}
        listen {{ DBMI_PORT }} ssl;
        server_name .{{ DBMI_APP_DOMAIN }};

        ssl_certificate "{{ DBMI_SSL_PATH }}/{{ DBMI_APP_DOMAIN }}.crt";
        ssl_certificate_key "{{ DBMI_SSL_PATH }}/{{ DBMI_APP_DOMAIN }}.key";

        error_page 497 https://$host:{{ DBMI_PORT }}$request_uri;

    {% else %}

        listen {{ DBMI_PORT }};
        server_name .{{ DBMI_APP_DOMAIN }};

    {% endif %}

    {% if DBMI_HEALTHCHECK is defined and DBMI_HEALTHCHECK %}
        include /etc/nginx/conf.d/nginx.healthcheck.conf;
    {% endif %}

    {% if DBMI_LB is defined and DBMI_LB %}

        ##
        # AWS Configs
        #   Configure for load balancer
        ##

        set_real_ip_from {{ DBMI_LB_SUBNET }};
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;

        {% if DBMI_SSL is defined and DBMI_SSL %}
        # If load balanced, check the original protocol and redirect accordingly
        if ($http_x_forwarded_proto = 'http') {
             return 301 https://$host$request_uri;
        }
        {% endif %}

    {% endif %}

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

    {% if DBMI_STATIC_FILES is defined and DBMI_STATIC_FILES %}
        location {{ DBMI_APP_STATIC_URL_PATH }} {
            autoindex on;
            alias {{ DBMI_APP_STATIC_ROOT }};

            # Disable logging for static files
            access_log off;
        }
    {% endif %}

    {% if DBMI_MEDIA_FILES is defined and DBMI_MEDIA_FILES %}
        location {{ DBMI_APP_MEDIA_URL_PATH }} {
            autoindex on;
            alias {{ DBMI_APP_MEDIA_ROOT }};
        }
    {% endif %}

    {% if DBMI_FILE_PROXY is defined and DBMI_FILE_PROXY %}
        include /etc/nginx/conf.d/nginx.proxy.conf;
    {% endif %}

        location / {
            # checks for static file, if not found proxy to app
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $proxy_connection;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
            proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
            proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

            proxy_redirect off;
            proxy_pass   http://gunicorn;
        }

        client_max_body_size 4G;
        server_name _;
    }

    {% if DBMI_SERVICE_DISCOVERY_NAME is defined and DBMI_SERVICE_DISCOVERY_NAME %}
    server {
    {% if DBMI_SERVICE_DISCOVERY_SSL is defined and DBMI_SERVICE_DISCOVERY_SSL %}
        listen {{ DBMI_PORT }} ssl;
        server_name .{{ DBMI_SERVICE_DISCOVERY_NAME }}.{{ DBMI_SERVICE_DISCOVERY_NAMESPACE }};

        ssl_certificate "{{ DBMI_SSL_PATH }}/{{ DBMI_SERVICE_DISCOVERY_NAME }}.{{ DBMI_SERVICE_DISCOVERY_NAMESPACE }}.crt";
        ssl_certificate_key "{{ DBMI_SSL_PATH }}/{{ DBMI_SERVICE_DISCOVERY_NAME }}.{{ DBMI_SERVICE_DISCOVERY_NAMESPACE }}.key";

        error_page 497 https://$host:{{ DBMI_PORT }}$request_uri;

    {% else %}

        listen 80;
        server_name .{{ DBMI_SERVICE_DISCOVERY_DOMAIN }};

    {% endif %}

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

    {% if DBMI_FILE_PROXY is defined and DBMI_FILE_PROXY %}
        include /etc/nginx/conf.d/nginx.proxy.conf;
    {% endif %}

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $proxy_connection;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
            proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
            proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

            proxy_redirect off;
            proxy_pass   http://gunicorn;
        }

        client_max_body_size 4G;
    }
    {% endif %}
}
