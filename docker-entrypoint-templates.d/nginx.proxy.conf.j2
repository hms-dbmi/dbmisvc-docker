location ~ ^{{ DBMI_FILE_PROXY_PATH|default('/proxy') }}/(.*?)/(.*?)/(.*) {
    # Only allow internal redirects
    internal;

    # Location-specific logging
    access_log /var/log/nginx/proxy.access.log;
    error_log /var/log/nginx/proxy.error.log debug;

    # How to resove remote URLs, you may want to update this depending
    # on your setup, in our case itâ€™s inside a Docker container with
    # dnsmasq running.
    resolver {{ DBMI_FILE_PROXY_DNS|default('8.8.8.8') }} ipv6=off;

    # Extract the remote URL parts
    set $download_protocol $1;
    set $download_host $2;
    set $download_path $3;

    # Reconstruct the remote URL
    set $download_url $download_protocol://$download_host/$download_path;

    # Headers for the remote server, unset Authorization and Cookie for security reasons.
    proxy_set_header Host $download_host;
    proxy_set_header Authorization '';
    proxy_set_header Cookie '';
    proxy_set_header Content-Type '';

    # Headers for the response, by using $upstream_http_... here we can inject
    # other headers from Django, proxy_hide_header ensures the header from the
    # remote server isn't passed through.
    proxy_hide_header Content-Disposition;
    add_header Content-Disposition $upstream_http_content_disposition;

    # Stops the local disk from being written to (just forwards data through)
    proxy_max_temp_file_size 0;

    # Proxy the remote file through to the client
    proxy_pass $download_url$is_args$args;
}