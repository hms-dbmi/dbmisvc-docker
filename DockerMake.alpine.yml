alpine_nginx_modules_build:
  build_directory: ./
  FROM: python:{{ PYTHON_VERSION }}-alpine{{ ALPINE_VERSION }}
  build: |

    ARG ALPINE_VERSION
    ARG NGINX_VERSION
    ARG NGINX_NJS_VERSION
    ARG NGINX_PKG_RELEASE

    ENV NGINX_MODULES_DIR /usr/src/dbmisvc/output

    RUN set -x \
      && tempDir="$(mktemp -d)" \
      && apk add --no-cache --virtual .build-deps \
        gcc \
        libc-dev \
        make \
        openssl-dev \
        pcre2-dev \
        zlib-dev \
        linux-headers \
        libxslt-dev \
        gd-dev \
        geoip-dev \
        perl-dev \
        libedit-dev \
        bash \
        alpine-sdk \
        findutils \
        tar \
        gzip \
      && cd ${tempDir} \
      && curl -fSL https://github.com/evanmiller/mod_zip/archive/master.tar.gz -o mod_zip-master.tar.gz \
      && tar xzvf mod_zip-master.tar.gz \
      && curl -f -O https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
      && tar xzvf nginx-${NGINX_VERSION}.tar.gz \
      && cd nginx-${NGINX_VERSION} \
      && CONFIG="\
          --prefix=/etc/nginx \
          --sbin-path=/usr/sbin/nginx \
          --modules-path=/usr/lib/nginx/modules \
          --conf-path=/etc/nginx/nginx.conf \
          --error-log-path=/var/log/nginx/error.log \
          --http-log-path=/var/log/nginx/access.log \
          --pid-path=/var/run/nginx.pid \
          --lock-path=/var/run/nginx.lock \
          --http-client-body-temp-path=/var/cache/nginx/client_temp \
          --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
          --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
          --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
          --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
          --user=nginx \
          --group=nginx \
          --with-http_ssl_module \
          --with-http_realip_module \
          --with-http_addition_module \
          --with-http_sub_module \
          --with-http_dav_module \
          --with-http_flv_module \
          --with-http_mp4_module \
          --with-http_gunzip_module \
          --with-http_gzip_static_module \
          --with-http_random_index_module \
          --with-http_secure_link_module \
          --with-http_stub_status_module \
          --with-http_auth_request_module \
          --with-http_xslt_module=dynamic \
          --with-http_image_filter_module=dynamic \
          --with-http_geoip_module=dynamic \
          --with-threads \
          --with-stream \
          --with-stream_ssl_module \
          --with-stream_ssl_preread_module \
          --with-stream_realip_module \
          --with-stream_geoip_module=dynamic \
          --with-http_slice_module \
          --with-mail \
          --with-mail_ssl_module \
          --with-compat \
          --with-file-aio \
          --with-http_v2_module \
          --add-dynamic-module=${tempDir}/mod_zip-master \
      " \
      && ./configure --with-compat $CONFIG \
      && make modules \
      && mkdir -p ${NGINX_MODULES_DIR} \
      && cp ${tempDir}/nginx-${NGINX_VERSION}/objs/ngx_http_zip_module.so ${NGINX_MODULES_DIR}/

alpine_nginx_modules_copy:
  copy_from:
    alpine_nginx_modules_build:
      /usr/src/dbmisvc/output/ngx_http_zip_module.so: /usr/lib/nginx/modules/

alpine_nginx_install:
  build_directory: ./
  FROM: python:{{ PYTHON_VERSION }}-alpine{{ ALPINE_VERSION }}
  requires:
    - alpine_nginx_modules_copy
  build: |
    ARG ALPINE_VERSION
    ARG NGINX_VERSION
    ARG NGINX_NJS_VERSION
    ARG NGINX_PKG_RELEASE
    RUN set -x \
      # Install the latest release of NGINX Plus and/or NGINX Plus modules
      # Uncomment individual modules if necessary
      # Use versioned packages over defaults to specify a release
    && apkArch="$(cat /etc/apk/arch)" \
    && nginxPackages=" \
        nginx=${NGINX_VERSION}-r${NGINX_PKG_RELEASE} \
        nginx-module-xslt=${NGINX_VERSION}-r${NGINX_PKG_RELEASE} \
        nginx-module-geoip=${NGINX_VERSION}-r${NGINX_PKG_RELEASE} \
        nginx-module-image-filter=${NGINX_VERSION}-r${NGINX_PKG_RELEASE} \
        nginx-module-njs=${NGINX_VERSION}.${NGINX_NJS_VERSION}-r${NGINX_PKG_RELEASE} \
    " \
    # install prerequisites for public key and pkg-oss checks
        && apk add --no-cache --virtual .checksum-deps \
            openssl \
        && case "$apkArch" in \
            x86_64|aarch64) \
    # arches officially built by upstream
                set -x \
                && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" \
                && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \
                && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then \
                    echo "key verification succeeded!"; \
                    mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \
                else \
                    echo "key verification failed!"; \
                    exit 1; \
                fi \
                && apk add -X "https://nginx.org/packages/mainline/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages \
                ;; \
            *) \
    # we're on an architecture upstream doesn't officially build for
    # let's build binaries from the published packaging sources
                set -x \
                && tempDir="$(mktemp -d)" \
                && chown nobody:nobody $tempDir \
                && apk add --no-cache --virtual .build-deps \
                    gcc \
                    libc-dev \
                    make \
                    openssl-dev \
                    pcre2-dev \
                    zlib-dev \
                    linux-headers \
                    libxslt-dev \
                    gd-dev \
                    geoip-dev \
                    perl-dev \
                    libedit-dev \
                    bash \
                    alpine-sdk \
                    findutils \
                && su nobody -s /bin/sh -c " \
                    export HOME=${tempDir} \
                    && cd ${tempDir} \
                    && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && PKGOSSCHECKSUM=\"29ec1c635da36b7727953544e1a20e9d75bd9d2050e063b9f81f88ca07bb7ea0b65cef46d0f3cb7134b38ce9b94ecada631619f233231845a3d8a16b6ad0db82 *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\" \
                    && if [ \"\$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then \
                        echo \"pkg-oss tarball checksum verification succeeded!\"; \
                    else \
                        echo \"pkg-oss tarball checksum verification failed!\"; \
                        exit 1; \
                    fi \
                    && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \
                    && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \
                    && cd alpine \
                    && make all \
                    && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \
                    && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \
                    " \
                && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \
                && apk del .build-deps \
                && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \
                ;; \
        esac \
    # remove checksum deps
        && apk del .checksum-deps \
    # if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
        && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi \
        && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \
        && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \
    # Bring in gettext so we can get `envsubst`, then throw
    # the rest away. To do this, we need to install `gettext`
    # then move `envsubst` out of the way so `gettext` can
    # be deleted completely, then move `envsubst` back.
        && apk add --no-cache --virtual .gettext gettext \
        && mv /usr/bin/envsubst /tmp/ \
        \
        && runDeps="$( \
            scanelf --needed --nobanner /tmp/envsubst \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
        )" \
        && apk add --no-cache $runDeps \
        && apk del .gettext \
        && mv /tmp/envsubst /usr/local/bin/ \
    # Bring in tzdata so users could set the timezones through the environment
    # variables
        && apk add --no-cache tzdata \
    # Bring in curl and ca-certificates to make registering on DNS SD easier
        && apk add --no-cache curl ca-certificates

alpine_pip_build:
  requires:
  - base_meta
  build_directory: ./
  FROM: python:{{ PYTHON_VERSION }}-alpine{{ ALPINE_VERSION }}
  build: |

    # Install dependencies
    RUN apk add --update \
        build-base \
        g++

    # Add requirements
    ADD image-requirements.txt /image-requirements.txt
    RUN pip install -r /image-requirements.txt

alpine_build:
  copy_from:
    alpine_pip_build:
       /root/.cache: /root/
  build: |
    RUN apk add -U --no-cache \
      unzip \
      curl \
      bash \
      jq \
      less \
      openssl \
      && rm -rf /var/cache/apk/*

    # Set nginx user
    ENV DBMI_NGINX_USER nginx

alpine_prips_build:
  build_directory: ./
  build: |

    # Download prips, build, and install
    RUN BUILD_PACKAGES="wget gcc make libc-dev" \
        && apk add --no-cache --virtual .prips-deps $BUILD_PACKAGES \
        # Download and build prips
        && PRIPS_DIR="/tmp/prips" \
        && mkdir "$PRIPS_DIR" \
        && ( \
            cd "$PRIPS_DIR" \
            && wget -c https://devel.ringlet.net/files/sys/prips/prips-1.2.0.tar.gz -O - | tar -xz \
            && cd prips-1.2.0 \
            && make \
            && cp prips /usr/local/bin \
            && chmod +x /usr/local/bin/prips \
        ) \
        # Clean up packages
        && apk del .prips-deps \
        && rm -rf "$PRIPS_DIR"
